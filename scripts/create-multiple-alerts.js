const { PrismaClient } = require('@prisma/client');
const { sendAlertEmail } = require('../lib/email');

const prisma = new PrismaClient();

async function createMultipleAlerts() {
  try {
    console.log('üöÄ Cr√©ation de plusieurs alertes de test...');

    // Liste d'alertes de test vari√©es
    const testAlerts = [
      {
        message: "Pression art√©rielle √©lev√©e d√©tect√©e - 180/110 mmHg",
        messageRole: "technician",
        type: "Blood Pressure Alarm",
        requiredAction: "V√©rifier les param√®tres de pression et ajuster si n√©cessaire. Contacter le m√©decin si persistant.",
        priority: "high",
        machineId: "M001",
        status: "active"
      },
      {
        message: "Fuite d'air d√©tect√©e dans le circuit sanguin",
        messageRole: "technician",
        type: "Air Leak Alarm",
        requiredAction: "V√©rifier imm√©diatement les connexions, le pi√®ge √† bulles et les d√©tecteurs d'air.",
        priority: "critical",
        machineId: "M002",
        status: "active"
      },
      {
        message: "Temp√©rature du dialysat hors limites - 38.5¬∞C",
        messageRole: "technician",
        type: "Temperature Alarm",
        requiredAction: "V√©rifier le syst√®me de chauffage et ajuster la temp√©rature √† 37¬∞C.",
        priority: "high",
        machineId: "M001",
        status: "active"
      },
      {
        message: "Maintenance pr√©ventive requise - 3 mois",
        messageRole: "technician",
        type: "Maintenance Reminder",
        requiredAction: "Effectuer la maintenance programm√©e : remplacement des filtres, v√©rification des connexions √©lectriques.",
        priority: "medium",
        machineId: "M002",
        status: "active"
      },
      {
        message: "Conductivit√© hors limites - 14.2 mS/cm",
        messageRole: "technician",
        type: "Conductivity Alarm",
        requiredAction: "Ajuster la concentration en sel total du patient √† 138-145 mmol/l avant de commencer.",
        priority: "medium",
        machineId: "M001",
        status: "active"
      },
      {
        message: "Pression veineuse √©lev√©e - 350 mmHg",
        messageRole: "technician",
        type: "Venous Pressure Alarm",
        requiredAction: "V√©rifier l'aiguille veineuse, les pinces et la position du patient.",
        priority: "high",
        machineId: "M002",
        status: "active"
      },
      {
        message: "Calibration requise - Capteur de pression",
        messageRole: "technician",
        type: "Calibration Reminder",
        requiredAction: "Effectuer la calibration du capteur de pression avec les outils calibr√©s.",
        priority: "low",
        machineId: "M001",
        status: "active"
      },
      {
        message: "Niveau de solution dialysante bas",
        messageRole: "technician",
        type: "Solution Level Alarm",
        requiredAction: "Remplir le r√©servoir de solution dialysante.",
        priority: "medium",
        machineId: "M002",
        status: "active"
      }
    ];

    let createdCount = 0;
    let emailSentCount = 0;

    for (const alertData of testAlerts) {
      try {
        // V√©rifier que la machine existe
        const machine = await prisma.machine.findUnique({
          where: { id: alertData.machineId },
          select: {
            name: true,
            department: true,
          },
        });

        if (!machine) {
          console.warn(`‚ö†Ô∏è Machine non trouv√©e: ${alertData.machineId} - Alerte ignor√©e`);
          continue;
        }

        // Cr√©er l'alerte
        const alert = await prisma.alert.create({
          data: {
            message: alertData.message,
            messageRole: alertData.messageRole,
            type: alertData.type,
            requiredAction: alertData.requiredAction,
            priority: alertData.priority,
            timestamp: new Date(),
            status: alertData.status,
            machineId: alertData.machineId,
          },
          include: {
            machine: {
              select: {
                name: true,
                inventoryNumber: true,
                department: true,
              },
            },
          },
        });

        console.log(`‚úÖ Alerte cr√©√©e: ${alert.type} (${alert.priority}) - ${alert.machine.name}`);

        // Envoyer l'email de notification
        try {
          const emailResult = await sendAlertEmail({
            message: alertData.message,
            messageRole: alertData.messageRole,
            type: alertData.type,
            requiredAction: alertData.requiredAction,
            priority: alertData.priority,
            machineId: alertData.machineId,
            machineName: machine.name,
            department: machine.department,
          });

          if (emailResult.success) {
            emailSentCount++;
            console.log(`  üìß Email envoy√©`);
          } else {
            console.warn(`  ‚ö†Ô∏è √âchec email: ${emailResult.error}`);
          }
        } catch (emailError) {
          console.warn(`  ‚ö†Ô∏è Erreur email: ${emailError.message}`);
        }

        createdCount++;

        // Petite pause entre les cr√©ations
        await new Promise(resolve => setTimeout(resolve, 100));

      } catch (error) {
        console.error(`‚ùå Erreur lors de la cr√©ation de l'alerte "${alertData.type}":`, error.message);
      }
    }

    console.log('\nüìä R√©sum√©:');
    console.log(`  - Alertes cr√©√©es: ${createdCount}/${testAlerts.length}`);
    console.log(`  - Emails envoy√©s: ${emailSentCount}`);
    console.log('\nüéØ Prochaines √©tapes:');
    console.log('  - V√©rifiez les alertes dans /dashboard/technician/alerts');
    console.log('  - V√©rifiez le dropdown d\'alertes dans la navbar');
    console.log('  - Testez les filtres par priorit√© et type');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
createMultipleAlerts(); 
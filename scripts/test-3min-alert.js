const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function create3MinAlert() {
  try {
    console.log('üöÄ Cr√©ation d\'une alerte de test avec cycle de 3 minutes...');

    // 1. Simuler une maintenance termin√©e maintenant
    const now = new Date();
    const nextControlDate = new Date(now.getTime() + (3 * 60 * 1000)); // +3 minutes

    console.log(`üìÖ Date actuelle: ${now.toLocaleString()}`);
    console.log(`‚è∞ Prochaine v√©rification: ${nextControlDate.toLocaleString()}`);

    // 2. Cr√©er ou mettre √† jour un contr√¥le de maintenance
    const maintenanceControl = await prisma.maintenanceControl.upsert({
      where: {
        id: 999 // ID de test
      },
      update: {
        controlDate: now,
        nextControlDate: nextControlDate,
        controlType: "3_minutes",
        status: "completed",
        machineId: "M001",
        technicianId: "T001",
        notes: "Test de contr√¥le avec cycle de 3 minutes"
      },
      create: {
        controlDate: now,
        nextControlDate: nextControlDate,
        controlType: "3_minutes",
        status: "completed",
        machineId: "M001",
        technicianId: "T001",
        notes: "Test de contr√¥le avec cycle de 3 minutes"
      }
    });

    console.log('‚úÖ Contr√¥le de maintenance cr√©√©/mis √† jour');

    // 3. Cr√©er une alerte de rappel pour 3 minutes
    const alertMessage = `Rappel 3 minutes - Contr√¥le technique requis`;
    const alertType = "3-Minute Check";
    const requiredAction = "Effectuer un contr√¥le rapide de la machine apr√®s 3 minutes";

    const alert = await prisma.alert.create({
      data: {
        message: alertMessage,
        messageRole: "technician",
        type: alertType,
        requiredAction: requiredAction,
        priority: "high",
        timestamp: now,
        status: "active",
        machineId: "M001",
      },
      include: {
        machine: {
          select: {
            name: true,
            inventoryNumber: true,
            department: true,
          },
        },
      },
    });

    console.log('‚úÖ Alerte cr√©√©e avec succ√®s:');
    console.log(`  - ID: ${alert.id}`);
    console.log(`  - Message: ${alert.message}`);
    console.log(`  - Type: ${alert.type}`);
    console.log(`  - Priorit√©: ${alert.priority}`);
    console.log(`  - Machine: ${alert.machine.name} (${alert.machine.inventoryNumber})`);
    console.log(`  - D√©partement: ${alert.machine.department}`);
    console.log(`  - Statut: ${alert.status}`);
    console.log(`  - Timestamp: ${alert.timestamp.toLocaleString()}`);

    // 4. Cr√©er une maintenance schedule pour 3 minutes
    const maintenanceSchedule = await prisma.maintenanceSchedule.upsert({
      where: {
        id: 999 // ID de test
      },
      update: {
        type: "3-minute",
        tasks: JSON.stringify([
          "V√©rification rapide des param√®tres",
          "Contr√¥le des indicateurs",
          "Test de fonctionnement"
        ]),
        dueDate: nextControlDate.toISOString().split('T')[0],
        status: "Pending"
      },
      create: {
        type: "3-minute",
        tasks: JSON.stringify([
          "V√©rification rapide des param√®tres",
          "Contr√¥le des indicateurs", 
          "Test de fonctionnement"
        ]),
        dueDate: nextControlDate.toISOString().split('T')[0],
        status: "Pending",
        machineId: "M001"
      }
    });

    console.log('‚úÖ Maintenance schedule cr√©√©e pour 3 minutes');

    console.log('\nüìã R√©sum√©:');
    console.log('  - Contr√¥le de maintenance termin√© maintenant');
    console.log('  - Alerte cr√©√©e pour rappel dans 3 minutes');
    console.log('  - Prochaine v√©rification programm√©e');
    console.log('  - L\'alerte appara√Ætra dans /dashboard/technician/alerts');
    console.log('  - Elle sera visible dans le dropdown d\'alertes de la navbar');

    console.log('\n‚è∞ Pour tester:');
    console.log('  - Attendez 3 minutes');
    console.log('  - V√©rifiez que l\'alerte appara√Æt dans l\'interface');
    console.log('  - Ou lancez le script check-maintenance-schedule-alerts.js');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'alerte 3 minutes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
create3MinAlert(); 
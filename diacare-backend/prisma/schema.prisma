generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  password  String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patientId     String?   @unique
  technicianId  String?   @unique
  adminId       String?   @unique
  
  // One-to-many relations
  faults        Fault[]
  alerts        Alert[]
  interventions Intervention[]
  maintenanceSchedules MaintenanceSchedule[]
}

model Machine {
  id              String   @id
  name            String
  inventoryNumber String   @unique
  department      String
  status          String   @default("Active")
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  faults        Fault[]
  alerts        Alert[]
  interventions Intervention[]
  maintenanceSchedules MaintenanceSchedule[]
}

model Fault {
  id              Int      @id @default(autoincrement())
  date            DateTime
  faultType       String
  description     String
  downtime        String
  rootCause       String
  correctiveAction String
  status          String   @default("Open")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  patientId  String
  machineId  String
  patient    User     @relation(fields: [patientId], references: [patientId])
  machine    Machine  @relation(fields: [machineId], references: [id])
}

model Alert {
  id             Int      @id @default(autoincrement())
  message        String
  messageRole    String
  type           String
  requiredAction String
  priority       String   @default("medium")
  timestamp      DateTime @default(now())
  status         String   @default("active")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  machineId String
  machine   Machine @relation(fields: [machineId], references: [id])
}

model Intervention {
  id                    Int      @id @default(autoincrement())
  requestDate           DateTime
  requestedIntervention String
  arrivalAtWorkshop     DateTime?
  department            String
  requestedBy           String
  returnToService       DateTime?
  equipmentDescription  String
  inventoryNumber       String
  problemDescription    String
  interventionType      String
  datePerformed         DateTime?
  tasksCompleted        String?
  partsReplaced         Int?
  partDescription       String?
  price                 Decimal? @db.Decimal(10, 2)
  technician            String
  timeSpent             Int?
  status                String   @default("Pending")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  technicianId String
  technician   User     @relation(fields: [technicianId], references: [technicianId])
}

model MaintenanceSchedule {
  id        Int      @id @default(autoincrement())
  type      String
  tasks     Json     // Array of tasks stored as JSON
  dueDate   DateTime
  status    String   @default("Pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  machineId String
  machine   Machine @relation(fields: [machineId], references: [id])
}

model Taxe {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  type        String   // percentage, fixed
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


